#!/usr/bin/python

import os
import sys
import re

rel_path = sys.argv[1]

rootdir = os.path.abspath('')
startdir = os.sep.join([rootdir, rel_path])
tag_pattern = re.compile("{% extends (.*?) %}")
css_pattern = re.compile("{% css (.*?) %}")
css_counter = 0


class Tree():
    def __init__(self, templates=[]):
        self.templates = templates
        
    def get_all():
        pass
    
    def get_family():
        # Potential family structure: {filename: {'path': '', 'parent': '', 'children': {}, 'css': []}}
        pass
    
    def get_orphans():
        pass

    def place_child(parent, child):
        pass
        
class Template():
    def __init__(self, **kwargs):
        self.path = kwargs.get('path', '')
        self.filename = kwargs.get('filename', '')
        self.parent = kwargs.get('parent', None)
        self.children = kwargs.get('children', [])
        self.css = kwargs.get('css', [])
        
    ## validate children as iterable
    # children.__iter__()
    # css.__iter__()
    
    def __unicode__(self):
        return self.path
    
tree = Tree()

for path, dirs, files in os.walk(startdir):
    
    for filename in files:
        if re.search('.*\.html$', filename):
            filepath = os.sep.join([path,filename])
            template = Template(path=filepath, filename=filename)
            
            fhandle = open(filepath,"r")
            for line in fhandle: 
                
                match = tag_pattern.findall(line)
                if match:
                    for el in match:
                        template.parent = el.strip("\'\"")
                        
                match = css_pattern.findall(line)
                if match:
                    for el in match:
                        css_counter = css_counter+1
                        template.css.append(el)
                        
            tree.templates.append(template)

for template in tree.templates:
    if template.parent:
        print template.__dict__

print "\nNumber of Templates: %s\n" % len(tree.templates)
print "\nNumber of css tags: %s\n" % css_counter
